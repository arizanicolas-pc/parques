def dibujar_tablero():
    """Dibuja el tablero visual"""
    # Dibujar círculo del tablero
    pygame.draw.circle(screen, GRAY, (TABLERO_CENTRO_X, TABLERO_CENTRO_Y), TABLERO_RADIO, 3)
    
    
    for i in range(68):
        angulo = (i / 68) * 360
        x = TABLERO_CENTRO_X + int((TABLERO_RADIO - 20) * pygame.math.Vector2(1, 0).rotate(angulo).x)
        y = TABLERO_CENTRO_Y + int((TABLERO_RADIO - 20) * pygame.math.Vector2(1, 0).rotate(angulo).y)
        
        
        color_casilla = LIGHT_BLUE if es_casilla_seguro(i) else WHITE
        pygame.draw.circle(screen, color_casilla, (x, y), 8)
        pygame.draw.circle(screen, BLACK, (x, y), 8, 2)
        
        
        fichas_en_casilla = casillas[i]
        for j, ficha in enumerate(fichas_en_casilla):
            color_ficha = jugadores[ficha.jugador]["color_pygame"]
            offset_x = -6 + (j % 2) * 12
            offset_y = -6 + (j // 2) * 12
            pygame.draw.circle(screen, color_ficha, (x + offset_x, y + offset_y), 4)
    
    
    salidas = {"rojo": 5, "verde": 22, "amarillo": 39, "azul": 56}
    for jugador, casilla in salidas.items():
        angulo = (casilla / 68) * 360
        x = TABLERO_CENTRO_X + int((TABLERO_RADIO - 20) * pygame.math.Vector2(1, 0).rotate(angulo).x)
        y = TABLERO_CENTRO_Y + int((TABLERO_RADIO - 20) * pygame.math.Vector2(1, 0).rotate(angulo).y)
        color = jugadores[jugador]["color_pygame"]
        pygame.draw.circle(screen, color, (x, y), 12, 3)

def dibujar_interfaz():
    """Dibuja la interfaz del juego"""
    screen.fill(BACKGROUND)
    
    
    title = title_font.render("PARQUÉS 4 JUGADORES", True, WHITE)
    title_rect = title.get_rect(center=(SCREEN_WIDTH // 2, 30))
    screen.blit(title, title_rect)
    
    
    panel_x = 20
    panel_y = 80
    
  
    if not juego_terminado:
        jugador_actual = orden_jugadores[turno_actual]
        color_actual = jugadores[jugador_actual]["color_pygame"]
        turno_text = f"TURNO: {jugador_actual.upper()}"
        turno_surface = large_font.render(turno_text, True, color_actual)
        screen.blit(turno_surface, (panel_x, panel_y))
    

    dibujar_dado(screen, dados[0], panel_x, panel_y + 40, 50)
    dibujar_dado(screen, dados[1], panel_x + 60, panel_y + 40, 50)
    
    suma_text = f"Suma: {sum(dados)}"
    suma_surface = button_font.render(suma_text, True, WHITE)
    screen.blit(suma_surface, (panel_x + 120, panel_y + 55))
    
   
    info_y = panel_y + 120
    for i, (jugador, data) in enumerate(jugadores.items()):
        color_pygame = data["color_pygame"]
        
   
        nombre_text = f"{jugador.upper()}:"
        nombre_surface = button_font.render(nombre_text, True, color_pygame)
        screen.blit(nombre_surface, (panel_x, info_y))
        
        
        fichas_carcel = sum(1 for f in data["fichas"] if f.estado == "carcel")
        fichas_tablero = sum(1 for f in data["fichas"] if f.estado == "tablero")
        fichas_llegada = sum(1 for f in data["fichas"] if f.estado == "llegada")
        
        estado_text = f"Cárcel: {fichas_carcel} | Tablero: {fichas_tablero} | Llegada: {fichas_llegada}"
        estado_surface = small_font.render(estado_text, True, WHITE)
        screen.blit(estado_surface, (panel_x + 20, info_y + 25))
        
        info_y += 60
    
    
    dibujar_tablero()
    

    if mensaje_estado:
        # Dividir mensaje largo en múltiples líneas
        max_width = 600
        words = mensaje_estado.split()
        lines = []
        current_line = []
        
        for word in words:
            test_line = ' '.join(current_line + [word])
            if small_font.size(test_line)[0] <= max_width:
                current_line.append(word)
            else:
                if current_line:
                    lines.append(' '.join(current_line))
                current_line = [word]
        
        if current_line:
            lines.append(' '.join(current_line))
        
        # Mostrar líneas
        mensaje_y = SCREEN_HEIGHT - 100
        for line in lines:
            mensaje_surface = small_font.render(line, True, ORANGE)
            screen.blit(mensaje_surface, (20, mensaje_y))
            mensaje_y += 20

def main():
    """Función principal del juego"""
    global esperando_input, juego_terminado, ganador, mensaje_estado
    
    inicializar_juego()
    
    # Botones
    lanzar_button = Button("Lanzar Dados", 20, SCREEN_HEIGHT - 200, 150, 40)
    reiniciar_button = Button("Nuevo Juego", 200, SCREEN_HEIGHT - 200, 150, 40)
    
    # Botones para seleccionar fichas (solo se muestran cuando hay opciones)
    ficha_buttons = []
    for i in range(4):
        btn = Button(f"Ficha {i+1}", 20 + i * 120, SCREEN_HEIGHT - 150, 100, 30)
        ficha_buttons.append(btn)
    
    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.MOUSEBUTTONDOWN:
                pos = pygame.mouse.get_pos()
                
                # Botón lanzar dados
                if lanzar_button.is_clicked(pos) and not juego_terminado and not esperando_input:
                    turno_jugador()
                
                # Botón reiniciar
                if reiniciar_button.is_clicked(pos):
                    inicializar_juego()
                
                # Botones de selección de fichas
                if esperando_input:
                    for i, btn in enumerate(ficha_buttons):
                        if i < len(fichas_movibles) and btn.is_clicked(pos):
                            seleccionar_ficha(i)
                
            elif event.type == pygame.KEYDOWN:
                # Teclas numéricas para seleccionar fichas
                if esperando_input:
                    if event.key >= pygame.K_1 and event.key <= pygame.K_4:
                        indice = event.key - pygame.K_1
                        if indice < len(fichas_movibles):
                            seleccionar_ficha(indice)
        
        # Dibujar interfaz
        dibujar_interfaz()
        
        # Dibujar botones
        if not juego_terminado and not esperando_input:
            lanzar_button.draw(screen)
        
        reiniciar_button.draw(screen)
        
        # Dibujar botones de selección de fichas
        if esperando_input:
            instruccion = "Selecciona una ficha (clic o teclas 1-4):"
            instruccion_surface = button_font.render(instruccion, True, WHITE)
            screen.blit(instruccion_surface, (20, SCREEN_HEIGHT - 180))
            
            for i in range(len(fichas_movibles)):
                if i < len(ficha_buttons):
                    # Actualizar texto del botón
                    ficha_buttons[i].text = str(fichas_movibles[i])
                    ficha_buttons[i].text_surface = button_font.render(ficha_buttons[i].text, True, ficha_buttons[i].text_color)
                    ficha_buttons[i].draw(screen)
        
        # Mostrar ganador
        if juego_terminado and ganador:
            ganador_text = f"¡{ganador.upper()} GANA!"
            ganador_surface = title_font.render(ganador_text, True, jugadores[ganador]["color_pygame"])
            ganador_rect = ganador_surface.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2))
            
            # Fondo para el texto del ganador
            pygame.draw.rect(screen, BLACK, ganador_rect.inflate(40, 20))
            pygame.draw.rect(screen, jugadores[ganador]["color_pygame"], ganador_rect.inflate(40, 20), 3)
            screen.blit(ganador_surface, ganador_rect)
        
        pygame.display.flip()
        clock.tick(60)
    
    pygame.quit()
    sys.exit()

if __name__ == "__main__":
    main()
